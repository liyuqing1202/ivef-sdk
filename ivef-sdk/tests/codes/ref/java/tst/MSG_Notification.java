/* 
 *  MSG_Notification
 *
 *  MSG_Notification is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by schema2code on Tue Jan 8 23:49:45 2013.
 **********************************************************************************
 *  Copyright 2010
 *
 */

package tst;

import java.util.*;
import java.text.DecimalFormat;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import tst.Event;
import tst.Message;

public class MSG_Notification { 

    private Vector<Event> m_events = new Vector<Event>();
    private boolean m_eventPresent;
    private Vector<Message> m_messages = new Vector<Message>();
    private boolean m_messagePresent;

    public MSG_Notification() {

        m_eventPresent = false;
        m_messagePresent = false;
    }

    public MSG_Notification(MSG_Notification val) {

        for(int i=0; i < val.countOfEvents(); i++ ) {
            m_events.add( val.getEventAt(i) );
        }
        for(int i=0; i < val.countOfMessages(); i++ ) {
            m_messages.add( val.getMessageAt(i) );
        }
    }

    public boolean removeEvent(Event val) {
        if (m_events.size() <= 0) {
            return false; // scalar already at minOccurs
        }

        m_events.remove(val);
        return true;
    }

    public boolean addEvent(Event val) {

        m_events.add(val);
        return true;
    }

    public Event getEventAt(int i) {

        return (Event) m_events.get(i);
    }

    public int countOfEvents() {

        return m_events.size();
    }

    public boolean removeMessage(Message val) {
        if (m_messages.size() <= 0) {
            return false; // scalar already at minOccurs
        }

        m_messages.remove(val);
        return true;
    }

    public boolean addMessage(Message val) {

        m_messages.add(val);
        return true;
    }

    public Message getMessageAt(int i) {

        return (Message) m_messages.get(i);
    }

    public int countOfMessages() {

        return m_messages.size();
    }

    public String toXML() {

        String xml = "<MSG_Notification";
        String dataMember;        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        df.setTimeZone(TimeZone.getTimeZone("UTC"));
        DecimalFormat nf = new DecimalFormat("0.000000");

        xml += ">\n";
        if (m_events.size() < 0) {
            return null; // not enough values
        }
        for(int i=0; i < m_events.size(); i++ ) {
           Event attribute = (Event) m_events.get(i);
            dataMember = attribute.toXML();
            if (dataMember != null) {
               xml += dataMember;
            } else {
               return null; // not all required data members have been set 
            } 
        } 
        if (m_messages.size() < 0) {
            return null; // not enough values
        }
        for(int i=0; i < m_messages.size(); i++ ) {
           Message attribute = (Message) m_messages.get(i);
            dataMember = attribute.toXML();
            if (dataMember != null) {
               xml += dataMember;
            } else {
               return null; // not all required data members have been set 
            } 
        } 
        xml += "</MSG_Notification>\n";
        return xml;
    }

    public String toString(String lead) {

        String str = lead + "MSG_Notification\n";
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        df.setTimeZone(TimeZone.getTimeZone("UTC"));
        DecimalFormat nf = new DecimalFormat("0.000000");

        for(int i=0; i < m_events.size(); i++ ) {
           Event attribute = (Event) m_events.get(i);
           str += attribute.toString(lead + "    ");
        }
        for(int i=0; i < m_messages.size(); i++ ) {
           Message attribute = (Message) m_messages.get(i);
           str += attribute.toString(lead + "    ");
        }
        return str;
    }
    public String encode( String str) {

        str = str.replaceAll("&", "&amp;");
        str = str.replaceAll("<", "&lt;");
        str = str.replaceAll(">", "&gt;");
        str = str.replaceAll("\"", "&quot;");
        return str;
    }


}
