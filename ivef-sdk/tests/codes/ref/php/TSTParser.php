<?php

// 
//  Parser
//
//  Parser is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  Parser is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by schema2code on Tue Jan 8 23:30:39 2013.
//*********************************************************************************
//  Copyright 2010
//

require_once "TSTMSG_Notification.php";
require_once "TSTArgument.php";
require_once "TSTAreaName.php";

class Parser { 

    public function messageNameOfXMLString($data) { 

        $xml = new SimpleXMLElement($data);
        return $xml->getName();
    }

    public function parseXMLMessage($data) { 

        $tag = $this->messageNameOfXMLString($data);

        if ($tag == "MSG_Notification") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_Notification($xml);
        }  else if ($tag == "Argument") {
            $xml = new SimpleXMLElement($data);
            return $this->parseArgument($xml);
        }  else if ($tag == "AreaName") {
            $xml = new SimpleXMLElement($data);
            return $this->parseAreaName($xml);
        } 
        return; // error no root message found
    }

    private function hasAttribute($object, $attribute) { 
        foreach($object->attributes() as $a => $b) { 
            if ($a == $attribute) { 
                return true; 
            }     
        } 
        return false; 
    }

    private function hasChild($object, $child) { 
        foreach($object->children() as $a => $b) { 
            if ($a == $child) { 
                return true; 
            }     
        } 
        return false; 
    }

    private function countOfChild($object, $child) { 
        $count = 0;
        foreach($object->children() as $a => $b) { 
            if ($a == $child) { 
                $count++; 
            }     
        } 
        return $count; 
    }

    public function parseMSG_Notification( $simplexml ) {

        $element = new MSG_Notification();

        for ($i = 0; $i < $this->countOfChild($simplexml, "Event"); $i++) { 
            $child = $this->parseEvent($simplexml->Event[$i]);
            $element->addEvent($child);
        }
        for ($i = 0; $i < $this->countOfChild($simplexml, "Message"); $i++) { 
            $child = $this->parseMessage($simplexml->Message[$i]);
            $element->addMessage($child);
        }
        return $element;
    }

    private function parseMessage( $simplexml ) {

        $element = new Message();

        for ($i = 0; $i < $this->countOfChild($simplexml, "Argument"); $i++) { 
            $child = $this->parseArgument($simplexml->Argument[$i]);
            $element->addArgument($child);
        }
        if ($this->hasAttribute($simplexml, "TimeStamp")) { 
            $element->setTimeStamp((string) $simplexml["TimeStamp"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Code")) { 
            $element->setCode((string) $simplexml["Code"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Version")) { 
            $element->setVersion((string) $simplexml["Version"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    public function parseArgument( $simplexml ) {

        $element = new Argument();

        return $element;
    }

    private function parseEvent( $simplexml ) {

        $element = new Event();

        if ($this->hasChild($simplexml, "AreaName")) { 
            $child = $this->parseAreaName($simplexml->AreaName);
            $element->setAreaName($child);
        }
        if ($this->hasAttribute($simplexml, "Name")) { 
            $element->setName((string) $simplexml["Name"]);
        }
        if ($this->hasAttribute($simplexml, "Id")) { 
            $element->setId((string) $simplexml["Id"]);
        }
        if ($this->hasAttribute($simplexml, "Speed")) { 
            $element->setSpeed((string) $simplexml["Speed"]);
        }
        return $element;
    }

    public function parseAreaName( $simplexml ) {

        $element = new AreaName();

        return $element;
    }


}
?>
