/* 
 *  Event
 *
 *  Event is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by schema2code on Tue Jan 8 23:30:40 2013.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __EVENT_H__
#define __EVENT_H__

#include <QObject>
#include <QString>
#include <QDateTime>

class XmlStreamReader;

namespace tst {

//-----------------------------------------------------------
//! \brief       Class definition of Event
//!
//! Description of the line or area regarding the event
//!
class Event : public QObject { 
    Q_OBJECT

public:
    //! constructor
    //!
    Event();
    //! constructor for parser function
    //!
    Event(XmlStreamReader&);
    //! copy constructor
    //!
    Event(const Event&);
    //! = operator
    //!
    Event & operator=(const Event& val);
    //! == operator
    //!
    bool operator==(const Event& val);
    //! sets the AreaName
    //!
    bool setAreaName(const QString& val);

    //! gets the AreaName
    //!
    //! \return     QString
    //!
    const QString& getAreaName() const;

    //! returns true if AreaNameis used (optional field).
    //!
    //! \return     bool
    bool hasAreaName() const;

    //! sets the Name: Name of the event
    //!
    bool setName(QString val);

    //! gets the Name: Name of the event
    //!
    //! \return     QString
    //!
    QString getName() const;

    //! returns true if Nameis used (optional field).
    //!
    //! \return     bool
    bool hasName() const;

    //! sets the Id: Example of min/max exclusive
    //!
    bool setId(int val);

    //! gets the Id: Example of min/max exclusive
    //!
    //! \return     int
    //!
    int getId() const;

    //! returns true if Idis used (optional field).
    //!
    //! \return     bool
    bool hasId() const;

    //! sets the Speed: Example of min/max inclusive
    //!
    bool setSpeed(float val);

    //! gets the Speed: Example of min/max inclusive
    //!
    //! \return     float
    //!
    float getSpeed() const;

    //! returns true if Speedis used (optional field).
    //!
    //! \return     bool
    bool hasSpeed() const;

    //! generates XML of this object including attributes and child elements
    //! returns QString::null if not all required elements are available
    //! If null returned check lastError() for problem description
    //!
    //! \return     QString
    const QString& toXML();

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString() const;

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead) const;

    //! return last error found in toXML function
    //!
    //! \return     QString
    const QString& lastError() const;

    //! return changed 
    //!
    //! \return     bool
    const bool& changed() const;

    //! return store 
    //!
    //! \return     QString
    const QString& store() const;


private:
    QString m_areaName;
    bool m_areaNamePresent;
    QString m_name;
    bool m_namePresent;
    int m_id;
    bool m_idPresent;
    float m_speed;
    bool m_speedPresent;
    QString m_lastError; 
    bool m_changed; 
    QString m_store;
}; 
} //end ns

#endif
