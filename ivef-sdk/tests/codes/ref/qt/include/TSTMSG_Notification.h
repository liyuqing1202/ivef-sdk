/* 
 *  MSG_Notification
 *
 *  MSG_Notification is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by schema2code on Tue Jan 8 23:30:40 2013.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __MSG_NOTIFICATION_H__
#define __MSG_NOTIFICATION_H__

#include <QObject>
#include <QString>
#include <QDateTime>
#include "TSTEvent.h"
#include "TSTMessage.h"

class XmlStreamReader;

namespace tst {

//-----------------------------------------------------------
//! \brief       Class definition of MSG_Notification
//!
//! MESSAGE sent by the supplier containing event data.
//!
class MSG_Notification : public QObject { 
    Q_OBJECT

public:
    //! constructor
    //!
    MSG_Notification();
    //! constructor for parser function
    //!
    MSG_Notification(XmlStreamReader&);
    //! copy constructor
    //!
    MSG_Notification(const MSG_Notification&);
    //! = operator
    //!
    MSG_Notification & operator=(const MSG_Notification& val);
    //! == operator
    //!
    bool operator==(const MSG_Notification& val);
    //! removes a Event.
    //!
    bool removeEvent(const Event& val);

    //! adds a Event.
    //!
    bool addEvent(const Event& val);

    //! gets the i-th Event.
    //!
    const Event& getEventAt(int i) const;

    //!              return the number of Event objects.
    //!
    //! \return     int
    int countOfEvents() const;

    //! removes a Message.
    //!
    bool removeMessage(const Message& val);

    //! adds a Message.
    //!
    bool addMessage(const Message& val);

    //! gets the i-th Message.
    //!
    const Message& getMessageAt(int i) const;

    //!              return the number of Message objects.
    //!
    //! \return     int
    int countOfMessages() const;

    //! generates XML of this object including attributes and child elements
    //! returns QString::null if not all required elements are available
    //! If null returned check lastError() for problem description
    //!
    //! \return     QString
    const QString& toXML();

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString() const;

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead) const;

    //! return last error found in toXML function
    //!
    //! \return     QString
    const QString& lastError() const;

    //! return changed 
    //!
    //! \return     bool
    const bool& changed() const;

    //! return store 
    //!
    //! \return     QString
    const QString& store() const;


private:
    QList<Event> m_events;
    QList<Message> m_messages;
    QString m_lastError; 
    bool m_changed; 
    QString m_store;
}; 
} //end ns

#endif
