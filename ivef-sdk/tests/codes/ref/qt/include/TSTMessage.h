/* 
 *  Message
 *
 *  Message is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by schema2code on Tue Jan 8 23:30:40 2013.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __MESSAGE_H__
#define __MESSAGE_H__

#include <QObject>
#include <QString>
#include <QDateTime>

class XmlStreamReader;

namespace tst {

//-----------------------------------------------------------
//! \brief       Class definition of Message
//!
//! Plain text message or a coded message, which uses a code to identify the message and optional arguments to pass along variable
//!
class Message : public QObject { 
    Q_OBJECT

public:
    //! constructor
    //!
    Message();
    //! constructor for parser function
    //!
    Message(XmlStreamReader&);
    //! copy constructor
    //!
    Message(const Message&);
    //! = operator
    //!
    Message & operator=(const Message& val);
    //! == operator
    //!
    bool operator==(const Message& val);
    //! removes a Argument.
    //!
    bool removeArgument(const QString& val);

    //! adds a Argument.
    //!
    bool addArgument(const QString& val);

    //! gets the i-th Argument.
    //!
    const QString& getArgumentAt(int i) const;

    //!              return the number of Argument objects.
    //!
    //! \return     int
    int countOfArguments() const;

    //! sets the TimeStamp: Example of time. Date and time in (subset  of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sssZ).
    //!
    bool setTimeStamp(QDateTime val);

    //! gets the TimeStamp: Example of time. Date and time in (subset  of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sssZ).
    //!
    //! \return     QDateTime
    //!
    QDateTime getTimeStamp() const;

    //! sets the Code: Example of enumeration
    //!
    bool setCode(int val);

    //! gets the Code: Example of enumeration
    //!
    //! \return     int
    //!
    int getCode() const;

    //! sets the Version: Example of fixed field
    //!
    bool setVersion(QString val);

    //! gets the Version: Example of fixed field
    //!
    //! \return     QString
    //!
    QString getVersion() const;

    //! generates XML of this object including attributes and child elements
    //! returns QString::null if not all required elements are available
    //! If null returned check lastError() for problem description
    //!
    //! \return     QString
    const QString& toXML();

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString() const;

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead) const;

    //! return last error found in toXML function
    //!
    //! \return     QString
    const QString& lastError() const;

    //! return changed 
    //!
    //! \return     bool
    const bool& changed() const;

    //! return store 
    //!
    //! \return     QString
    const QString& store() const;


private:
    QList<QString> m_arguments;
    QDateTime m_timeStamp;
    bool m_timeStampPresent;
    int m_code;
    bool m_codePresent;
    QString m_version;
    bool m_versionPresent;
    QString m_lastError; 
    bool m_changed; 
    QString m_store;
}; 
} //end ns

#endif
